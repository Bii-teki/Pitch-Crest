{"ast":null,"code":"var _jsxFileName = \"/home/bii/pitch-crest-v2/Pitch-Crest/clients/src/Components/User/NewPost.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistrationForm = ({\n  users_id,\n  addProject\n}) => {\n  const initialValues = {\n    name: '',\n    category: '',\n    user_id: users_id,\n    investor_id: 1,\n    description: ''\n  };\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    category: Yup.string().required('Category is required'),\n    description: Yup.string().required('Description is required')\n  });\n  const handleSubmit = (values, {\n    resetForm\n  }) => {\n    fetch(\"https://pitch-crest.onrender.com/user_investors\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response => response.json()).then(data => {\n      if (data.errors) {\n        console.error(\"Error:\", data.errors);\n        alert(\"Error adding the project.\");\n      } else if (data.id) {\n        addProject(data);\n        console.log(\"Success:\", data);\n        alert(\"Project added successfully!\");\n        resetForm(); // Reset the form fields\n      }\n    }).catch(error => {\n      console.error(\"Error:\", error);\n      alert(\"An error occurred while adding the project.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-54 mt-24 border border-blue-500 p-6 rounded-lg text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Add a New Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover-bg-blue-700 dark:focus:ring-blue-800\",\n          children: \"Post New Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = RegistrationForm;\nexport default RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","Formik","Form","Field","ErrorMessage","Yup","jsxDEV","_jsxDEV","RegistrationForm","users_id","addProject","initialValues","name","category","user_id","investor_id","description","validationSchema","object","shape","string","required","handleSubmit","values","resetForm","fetch","method","headers","body","JSON","stringify","then","response","json","data","errors","console","error","alert","id","log","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","_c","$RefreshReg$"],"sources":["/home/bii/pitch-crest-v2/Pitch-Crest/clients/src/Components/User/NewPost.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst RegistrationForm = ({ users_id, addProject }) => {\n  const initialValues = {\n    name: '',\n    category: '',\n    user_id: users_id,\n    investor_id: 1,\n    description: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    category: Yup.string().required('Category is required'),\n    description: Yup.string().required('Description is required'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    fetch(\"https://pitch-crest.onrender.com/user_investors\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(values),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.errors) {\n          console.error(\"Error:\", data.errors);\n          alert(\"Error adding the project.\");\n        } else if (data.id) {\n          addProject(data);\n          console.log(\"Success:\", data);\n          alert(\"Project added successfully!\");\n          resetForm(); // Reset the form fields\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        alert(\"An error occurred while adding the project.\");\n      });\n  };\n\n  return (\n    <div className=\"mb-54 mt-24 border border-blue-500 p-6 rounded-lg text-center\">\n      <h2 className=\"text-xl font-bold mb-4\">Add a New Project</h2>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          {/* ... (form fields and validation) ... */}\n          <button\n            type=\"submit\"\n            className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover-bg-blue-700 dark:focus:ring-blue-800\"\n          >\n            Post New Project\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default RegistrationForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}